// Generated by rstantools.  Do not edit by hand.

/*
    biva is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    biva is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with biva.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_Gaussian_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 206> locations_array__ =
  {" (found before start of program)",
  " (in 'Gaussian', line 144, column 4 to column 43)",
  " (in 'Gaussian', line 146, column 4 to column 43)",
  " (in 'Gaussian', line 148, column 4 to column 34)",
  " (in 'Gaussian', line 215, column 4 to column 35)",
  " (in 'Gaussian', line 217, column 4 to column 34)",
  " (in 'Gaussian', line 220, column 15 to column 16)",
  " (in 'Gaussian', line 220, column 18 to column 28)",
  " (in 'Gaussian', line 220, column 8 to column 39)",
  " (in 'Gaussian', line 222, column 15 to column 16)",
  " (in 'Gaussian', line 222, column 18 to column 26)",
  " (in 'Gaussian', line 222, column 8 to column 42)",
  " (in 'Gaussian', line 224, column 15 to column 23)",
  " (in 'Gaussian', line 224, column 8 to column 46)",
  " (in 'Gaussian', line 225, column 8 to column 42)",
  " (in 'Gaussian', line 226, column 8 to column 62)",
  " (in 'Gaussian', line 229, column 12 to column 52)",
  " (in 'Gaussian', line 227, column 23 to line 230, column 9)",
  " (in 'Gaussian', line 227, column 8 to line 230, column 9)",
  " (in 'Gaussian', line 233, column 16 to column 68)",
  " (in 'Gaussian', line 232, column 12 to line 233, column 68)",
  " (in 'Gaussian', line 231, column 8 to line 233, column 68)",
  " (in 'Gaussian', line 236, column 12 to column 55)",
  " (in 'Gaussian', line 235, column 34 to line 237, column 9)",
  " (in 'Gaussian', line 235, column 8 to line 237, column 9)",
  " (in 'Gaussian', line 239, column 12 to column 90)",
  " (in 'Gaussian', line 240, column 12 to column 74)",
  " (in 'Gaussian', line 238, column 30 to line 241, column 9)",
  " (in 'Gaussian', line 238, column 8 to line 241, column 9)",
  " (in 'Gaussian', line 218, column 4 to line 242, column 5)",
  " (in 'Gaussian', line 154, column 6 to column 77)",
  " (in 'Gaussian', line 153, column 27 to line 155, column 6)",
  " (in 'Gaussian', line 153, column 5 to line 155, column 6)",
  " (in 'Gaussian', line 152, column 26 to line 156, column 5)",
  " (in 'Gaussian', line 152, column 4 to line 156, column 5)",
  " (in 'Gaussian', line 159, column 6 to column 77)",
  " (in 'Gaussian', line 158, column 27 to line 160, column 6)",
  " (in 'Gaussian', line 158, column 5 to line 160, column 6)",
  " (in 'Gaussian', line 157, column 26 to line 161, column 5)",
  " (in 'Gaussian', line 157, column 4 to line 161, column 5)",
  " (in 'Gaussian', line 163, column 5 to column 71)",
  " (in 'Gaussian', line 162, column 26 to line 164, column 5)",
  " (in 'Gaussian', line 162, column 4 to line 164, column 5)",
  " (in 'Gaussian', line 168, column 8 to column 19)",
  " (in 'Gaussian', line 169, column 24 to column 34)",
  " (in 'Gaussian', line 169, column 10 to column 36)",
  " (in 'Gaussian', line 170, column 10 to column 26)",
  " (in 'Gaussian', line 172, column 14 to column 60)",
  " (in 'Gaussian', line 171, column 36 to line 173, column 11)",
  " (in 'Gaussian', line 171, column 10 to line 173, column 11)",
  " (in 'Gaussian', line 184, column 14 to column 32)",
  " (in 'Gaussian', line 183, column 43 to line 185, column 11)",
  " (in 'Gaussian', line 183, column 15 to line 185, column 11)",
  " (in 'Gaussian', line 181, column 14 to column 32)",
  " (in 'Gaussian', line 180, column 43 to line 182, column 11)",
  " (in 'Gaussian', line 180, column 15 to line 185, column 11)",
  " (in 'Gaussian', line 178, column 14 to column 32)",
  " (in 'Gaussian', line 177, column 43 to line 179, column 11)",
  " (in 'Gaussian', line 177, column 15 to line 185, column 11)",
  " (in 'Gaussian', line 175, column 14 to column 32)",
  " (in 'Gaussian', line 174, column 38 to line 176, column 11)",
  " (in 'Gaussian', line 174, column 10 to line 185, column 11)",
  " (in 'Gaussian', line 187, column 17 to column 23)",
  " (in 'Gaussian', line 187, column 6 to column 25)",
  " (in 'Gaussian', line 205, column 12 to column 115)",
  " (in 'Gaussian', line 204, column 30 to line 206, column 11)",
  " (in 'Gaussian', line 204, column 10 to line 206, column 11)",
  " (in 'Gaussian', line 203, column 39 to line 207, column 7)",
  " (in 'Gaussian', line 203, column 11 to line 207, column 7)",
  " (in 'Gaussian', line 200, column 12 to column 115)",
  " (in 'Gaussian', line 199, column 30 to line 201, column 11)",
  " (in 'Gaussian', line 199, column 10 to line 201, column 11)",
  " (in 'Gaussian', line 198, column 39 to line 202, column 7)",
  " (in 'Gaussian', line 198, column 11 to line 207, column 7)",
  " (in 'Gaussian', line 195, column 12 to column 115)",
  " (in 'Gaussian', line 194, column 30 to line 196, column 11)",
  " (in 'Gaussian', line 194, column 10 to line 196, column 11)",
  " (in 'Gaussian', line 193, column 39 to line 197, column 7)",
  " (in 'Gaussian', line 193, column 11 to line 207, column 7)",
  " (in 'Gaussian', line 190, column 12 to column 115)",
  " (in 'Gaussian', line 189, column 30 to line 191, column 11)",
  " (in 'Gaussian', line 189, column 10 to line 191, column 11)",
  " (in 'Gaussian', line 188, column 34 to line 192, column 7)",
  " (in 'Gaussian', line 188, column 6 to line 207, column 7)",
  " (in 'Gaussian', line 208, column 6 to column 59)",
  " (in 'Gaussian', line 186, column 10 to line 209, column 11)",
  " (in 'Gaussian', line 167, column 21 to line 210, column 7)",
  " (in 'Gaussian', line 167, column 6 to line 210, column 7)",
  " (in 'Gaussian', line 165, column 27 to line 211, column 5)",
  " (in 'Gaussian', line 165, column 4 to line 211, column 5)",
  " (in 'Gaussian', line 15, column 4 to column 19)",
  " (in 'Gaussian', line 17, column 4 to column 26)",
  " (in 'Gaussian', line 19, column 4 to column 26)",
  " (in 'Gaussian', line 21, column 28 to column 29)",
  " (in 'Gaussian', line 21, column 4 to column 31)",
  " (in 'Gaussian', line 23, column 28 to column 29)",
  " (in 'Gaussian', line 23, column 4 to column 31)",
  " (in 'Gaussian', line 25, column 11 to column 12)",
  " (in 'Gaussian', line 25, column 4 to column 14)",
  " (in 'Gaussian', line 27, column 11 to column 12)",
  " (in 'Gaussian', line 27, column 14 to column 22)",
  " (in 'Gaussian', line 27, column 4 to column 33)",
  " (in 'Gaussian', line 29, column 11 to column 12)",
  " (in 'Gaussian', line 29, column 14 to column 22)",
  " (in 'Gaussian', line 29, column 4 to column 33)",
  " (in 'Gaussian', line 31, column 4 to column 29)",
  " (in 'Gaussian', line 33, column 4 to column 35)",
  " (in 'Gaussian', line 35, column 4 to column 35)",
  " (in 'Gaussian', line 37, column 11 to column 19)",
  " (in 'Gaussian', line 37, column 21 to column 29)",
  " (in 'Gaussian', line 37, column 4 to column 48)",
  " (in 'Gaussian', line 39, column 11 to column 19)",
  " (in 'Gaussian', line 39, column 21 to column 29)",
  " (in 'Gaussian', line 39, column 4 to column 46)",
  " (in 'Gaussian', line 41, column 11 to column 19)",
  " (in 'Gaussian', line 41, column 21 to column 29)",
  " (in 'Gaussian', line 41, column 4 to column 48)",
  " (in 'Gaussian', line 43, column 11 to column 19)",
  " (in 'Gaussian', line 43, column 21 to column 29)",
  " (in 'Gaussian', line 43, column 4 to column 46)",
  " (in 'Gaussian', line 45, column 28 to column 36)",
  " (in 'Gaussian', line 45, column 4 to column 38)",
  " (in 'Gaussian', line 47, column 37 to column 45)",
  " (in 'Gaussian', line 47, column 4 to column 47)",
  " (in 'Gaussian', line 49, column 4 to column 41)",
  " (in 'Gaussian', line 53, column 10 to column 18)",
  " (in 'Gaussian', line 53, column 4 to column 20)",
  " (in 'Gaussian', line 56, column 4 to column 40)",
  " (in 'Gaussian', line 57, column 4 to column 40)",
  " (in 'Gaussian', line 58, column 4 to column 40)",
  " (in 'Gaussian', line 59, column 4 to column 40)",
  " (in 'Gaussian', line 61, column 4 to column 17)",
  " (in 'Gaussian', line 62, column 4 to column 17)",
  " (in 'Gaussian', line 63, column 4 to column 17)",
  " (in 'Gaussian', line 64, column 4 to column 17)",
  " (in 'Gaussian', line 66, column 4 to column 13)",
  " (in 'Gaussian', line 68, column 4 to column 13)",
  " (in 'Gaussian', line 70, column 4 to column 13)",
  " (in 'Gaussian', line 123, column 8 to column 17)",
  " (in 'Gaussian', line 125, column 8 to column 17)",
  " (in 'Gaussian', line 127, column 8 to column 17)",
  " (in 'Gaussian', line 128, column 8 to column 21)",
  " (in 'Gaussian', line 129, column 8 to column 19)",
  " (in 'Gaussian', line 130, column 8 to column 19)",
  " (in 'Gaussian', line 131, column 8 to column 21)",
  " (in 'Gaussian', line 132, column 8 to column 19)",
  " (in 'Gaussian', line 133, column 8 to column 19)",
  " (in 'Gaussian', line 134, column 8 to column 21)",
  " (in 'Gaussian', line 135, column 8 to column 19)",
  " (in 'Gaussian', line 136, column 8 to column 19)",
  " (in 'Gaussian', line 137, column 8 to column 21)",
  " (in 'Gaussian', line 138, column 8 to column 19)",
  " (in 'Gaussian', line 139, column 8 to column 19)",
  " (in 'Gaussian', line 121, column 39 to line 140, column 5)",
  " (in 'Gaussian', line 121, column 9 to line 140, column 5)",
  " (in 'Gaussian', line 107, column 8 to column 17)",
  " (in 'Gaussian', line 108, column 8 to column 21)",
  " (in 'Gaussian', line 109, column 8 to column 19)",
  " (in 'Gaussian', line 110, column 8 to column 19)",
  " (in 'Gaussian', line 111, column 8 to column 21)",
  " (in 'Gaussian', line 112, column 8 to column 19)",
  " (in 'Gaussian', line 113, column 8 to column 19)",
  " (in 'Gaussian', line 114, column 8 to column 21)",
  " (in 'Gaussian', line 115, column 8 to column 19)",
  " (in 'Gaussian', line 116, column 8 to column 19)",
  " (in 'Gaussian', line 117, column 8 to column 21)",
  " (in 'Gaussian', line 118, column 8 to column 19)",
  " (in 'Gaussian', line 119, column 8 to column 19)",
  " (in 'Gaussian', line 105, column 39 to line 120, column 5)",
  " (in 'Gaussian', line 105, column 9 to line 140, column 5)",
  " (in 'Gaussian', line 91, column 8 to column 17)",
  " (in 'Gaussian', line 92, column 8 to column 21)",
  " (in 'Gaussian', line 93, column 8 to column 19)",
  " (in 'Gaussian', line 94, column 8 to column 19)",
  " (in 'Gaussian', line 95, column 8 to column 21)",
  " (in 'Gaussian', line 96, column 8 to column 19)",
  " (in 'Gaussian', line 97, column 8 to column 19)",
  " (in 'Gaussian', line 98, column 8 to column 21)",
  " (in 'Gaussian', line 99, column 8 to column 19)",
  " (in 'Gaussian', line 100, column 8 to column 19)",
  " (in 'Gaussian', line 101, column 8 to column 21)",
  " (in 'Gaussian', line 102, column 8 to column 19)",
  " (in 'Gaussian', line 103, column 8 to column 19)",
  " (in 'Gaussian', line 89, column 39 to line 104, column 5)",
  " (in 'Gaussian', line 89, column 9 to line 140, column 5)",
  " (in 'Gaussian', line 74, column 8 to column 21)",
  " (in 'Gaussian', line 77, column 8 to column 19)",
  " (in 'Gaussian', line 78, column 8 to column 19)",
  " (in 'Gaussian', line 79, column 8 to column 21)",
  " (in 'Gaussian', line 80, column 8 to column 19)",
  " (in 'Gaussian', line 81, column 8 to column 19)",
  " (in 'Gaussian', line 82, column 8 to column 21)",
  " (in 'Gaussian', line 83, column 8 to column 19)",
  " (in 'Gaussian', line 84, column 8 to column 19)",
  " (in 'Gaussian', line 85, column 8 to column 21)",
  " (in 'Gaussian', line 86, column 8 to column 19)",
  " (in 'Gaussian', line 87, column 8 to column 19)",
  " (in 'Gaussian', line 71, column 34 to line 88, column 5)",
  " (in 'Gaussian', line 71, column 4 to line 140, column 5)",
  " (in 'Gaussian', line 144, column 11 to column 19)",
  " (in 'Gaussian', line 144, column 21 to column 29)",
  " (in 'Gaussian', line 146, column 11 to column 19)",
  " (in 'Gaussian', line 146, column 21 to column 29)",
  " (in 'Gaussian', line 148, column 24 to column 32)",
  " (in 'Gaussian', line 215, column 11 to column 21)",
  " (in 'Gaussian', line 217, column 11 to column 19)"};
#include <stan_meta_header.hpp>
class model_Gaussian final : public model_base_crtp<model_Gaussian> {
private:
  int N;
  int P_ymodel;
  int P_smodel;
  std::vector<int> Z;
  std::vector<int> D;
  std::vector<double> Y;
  Eigen::Matrix<double,-1,-1> X_ymodel_data__;
  Eigen::Matrix<double,-1,-1> X_smodel_data__;
  int ER;
  int K_ymodel;
  int K_smodel;
  Eigen::Matrix<double,-1,-1> beta_mean_ymodel_data__;
  Eigen::Matrix<double,-1,-1> beta_sd_ymodel_data__;
  Eigen::Matrix<double,-1,-1> beta_mean_smodel_data__;
  Eigen::Matrix<double,-1,-1> beta_sd_smodel_data__;
  std::vector<double> sigma_shape_ymodel;
  std::vector<double> sigma_scale_ymodel;
  int run_estimation;
  std::vector<int> S;
  std::vector<int> M00;
  std::vector<int> M01;
  std::vector<int> M10;
  std::vector<int> M11;
  int length00;
  int length01;
  int length10;
  int length11;
  int strata_prob_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_ymodel{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_smodel{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> beta_mean_ymodel{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> beta_sd_ymodel{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> beta_mean_smodel{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> beta_sd_smodel{nullptr, 0, 0};
public:
  ~model_Gaussian() {}
  model_Gaussian(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_Gaussian_namespace::model_Gaussian";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 90;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 90;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 91;
      context__.validate_dims("data initialization", "P_ymodel", "int",
        std::vector<size_t>{});
      P_ymodel = std::numeric_limits<int>::min();
      current_statement__ = 91;
      P_ymodel = context__.vals_i("P_ymodel")[(1 - 1)];
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "P_ymodel", P_ymodel, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "P_smodel", "int",
        std::vector<size_t>{});
      P_smodel = std::numeric_limits<int>::min();
      current_statement__ = 92;
      P_smodel = context__.vals_i("P_smodel")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "P_smodel", P_smodel, 0);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("Z", "N", N);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "Z", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      Z = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 94;
      Z = context__.vals_i("Z");
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "Z", Z, 0);
      current_statement__ = 94;
      stan::math::check_less_or_equal(function__, "Z", Z, 1);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("D", "N", N);
      current_statement__ = 96;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      D = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 96;
      D = context__.vals_i("D");
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 96;
      stan::math::check_less_or_equal(function__, "D", D, 1);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 98;
      Y = context__.vals_r("Y");
      current_statement__ = 99;
      stan::math::validate_non_negative_index("X_ymodel", "N", N);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("X_ymodel", "P_ymodel",
        P_ymodel);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "X_ymodel", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_ymodel)});
      X_ymodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P_ymodel,
                          std::numeric_limits<double>::quiet_NaN());
      new (&X_ymodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_ymodel_data__.data(), N,
        P_ymodel);
      {
        std::vector<local_scalar_t__> X_ymodel_flat__;
        current_statement__ = 101;
        X_ymodel_flat__ = context__.vals_r("X_ymodel");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 101;
            stan::model::assign(X_ymodel, X_ymodel_flat__[(pos__ - 1)],
              "assigning variable X_ymodel", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 101;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 102;
      stan::math::validate_non_negative_index("X_smodel", "N", N);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("X_smodel", "P_smodel",
        P_smodel);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "X_smodel", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_smodel)});
      X_smodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P_smodel,
                          std::numeric_limits<double>::quiet_NaN());
      new (&X_smodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_smodel_data__.data(), N,
        P_smodel);
      {
        std::vector<local_scalar_t__> X_smodel_flat__;
        current_statement__ = 104;
        X_smodel_flat__ = context__.vals_r("X_smodel");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 104;
            stan::model::assign(X_smodel, X_smodel_flat__[(pos__ - 1)],
              "assigning variable X_smodel", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 104;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 105;
      context__.validate_dims("data initialization", "ER", "int",
        std::vector<size_t>{});
      ER = std::numeric_limits<int>::min();
      current_statement__ = 105;
      ER = context__.vals_i("ER")[(1 - 1)];
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "ER", ER, 0);
      current_statement__ = 105;
      stan::math::check_less_or_equal(function__, "ER", ER, 1);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "K_ymodel", "int",
        std::vector<size_t>{});
      K_ymodel = std::numeric_limits<int>::min();
      current_statement__ = 106;
      K_ymodel = context__.vals_i("K_ymodel")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "K_ymodel", K_ymodel, 3);
      current_statement__ = 106;
      stan::math::check_less_or_equal(function__, "K_ymodel", K_ymodel, 6);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "K_smodel", "int",
        std::vector<size_t>{});
      K_smodel = std::numeric_limits<int>::min();
      current_statement__ = 107;
      K_smodel = context__.vals_i("K_smodel")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "K_smodel", K_smodel, 1);
      current_statement__ = 107;
      stan::math::check_less_or_equal(function__, "K_smodel", K_smodel, 2);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("beta_mean_ymodel", "K_ymodel",
        K_ymodel);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("beta_mean_ymodel", "P_ymodel",
        P_ymodel);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "beta_mean_ymodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_ymodel),
          static_cast<size_t>(P_ymodel)});
      beta_mean_ymodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(K_ymodel,
                                  P_ymodel,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&beta_mean_ymodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(beta_mean_ymodel_data__.data(),
        K_ymodel, P_ymodel);
      {
        std::vector<local_scalar_t__> beta_mean_ymodel_flat__;
        current_statement__ = 110;
        beta_mean_ymodel_flat__ = context__.vals_r("beta_mean_ymodel");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= K_ymodel; ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(beta_mean_ymodel,
              beta_mean_ymodel_flat__[(pos__ - 1)],
              "assigning variable beta_mean_ymodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("beta_sd_ymodel", "K_ymodel",
        K_ymodel);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("beta_sd_ymodel", "P_ymodel",
        P_ymodel);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "beta_sd_ymodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_ymodel),
          static_cast<size_t>(P_ymodel)});
      beta_sd_ymodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(K_ymodel,
                                P_ymodel,
                                std::numeric_limits<double>::quiet_NaN());
      new (&beta_sd_ymodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(beta_sd_ymodel_data__.data(),
        K_ymodel, P_ymodel);
      {
        std::vector<local_scalar_t__> beta_sd_ymodel_flat__;
        current_statement__ = 113;
        beta_sd_ymodel_flat__ = context__.vals_r("beta_sd_ymodel");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= K_ymodel; ++sym2__) {
            current_statement__ = 113;
            stan::model::assign(beta_sd_ymodel, beta_sd_ymodel_flat__[(pos__
              - 1)], "assigning variable beta_sd_ymodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 113;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::validate_non_negative_index("beta_mean_smodel", "K_smodel",
        K_smodel);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("beta_mean_smodel", "P_smodel",
        P_smodel);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "beta_mean_smodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_smodel),
          static_cast<size_t>(P_smodel)});
      beta_mean_smodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(K_smodel,
                                  P_smodel,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&beta_mean_smodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(beta_mean_smodel_data__.data(),
        K_smodel, P_smodel);
      {
        std::vector<local_scalar_t__> beta_mean_smodel_flat__;
        current_statement__ = 116;
        beta_mean_smodel_flat__ = context__.vals_r("beta_mean_smodel");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= K_smodel; ++sym2__) {
            current_statement__ = 116;
            stan::model::assign(beta_mean_smodel,
              beta_mean_smodel_flat__[(pos__ - 1)],
              "assigning variable beta_mean_smodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 116;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::validate_non_negative_index("beta_sd_smodel", "K_smodel",
        K_smodel);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("beta_sd_smodel", "P_smodel",
        P_smodel);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "beta_sd_smodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_smodel),
          static_cast<size_t>(P_smodel)});
      beta_sd_smodel_data__ = Eigen::Matrix<double,-1,-1>::Constant(K_smodel,
                                P_smodel,
                                std::numeric_limits<double>::quiet_NaN());
      new (&beta_sd_smodel)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(beta_sd_smodel_data__.data(),
        K_smodel, P_smodel);
      {
        std::vector<local_scalar_t__> beta_sd_smodel_flat__;
        current_statement__ = 119;
        beta_sd_smodel_flat__ = context__.vals_r("beta_sd_smodel");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= K_smodel; ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(beta_sd_smodel, beta_sd_smodel_flat__[(pos__
              - 1)], "assigning variable beta_sd_smodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      stan::math::validate_non_negative_index("sigma_shape_ymodel",
        "K_ymodel", K_ymodel);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "sigma_shape_ymodel",
        "double", std::vector<size_t>{static_cast<size_t>(K_ymodel)});
      sigma_shape_ymodel = std::vector<double>(K_ymodel,
                             std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 121;
      sigma_shape_ymodel = context__.vals_r("sigma_shape_ymodel");
      current_statement__ = 122;
      stan::math::validate_non_negative_index("sigma_scale_ymodel",
        "K_ymodel", K_ymodel);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "sigma_scale_ymodel",
        "double", std::vector<size_t>{static_cast<size_t>(K_ymodel)});
      sigma_scale_ymodel = std::vector<double>(K_ymodel,
                             std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 123;
      sigma_scale_ymodel = context__.vals_r("sigma_scale_ymodel");
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "sigma_scale_ymodel",
        sigma_scale_ymodel, 0);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "run_estimation", "int",
        std::vector<size_t>{});
      run_estimation = std::numeric_limits<int>::min();
      current_statement__ = 124;
      run_estimation = context__.vals_i("run_estimation")[(1 - 1)];
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "run_estimation",
        run_estimation, 0);
      current_statement__ = 124;
      stan::math::check_less_or_equal(function__, "run_estimation",
        run_estimation, 1);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("S", "K_ymodel", K_ymodel);
      current_statement__ = 126;
      S = std::vector<int>(K_ymodel, std::numeric_limits<int>::min());
      current_statement__ = 127;
      M00 = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 128;
      M01 = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 129;
      M10 = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 130;
      M11 = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 131;
      length00 = std::numeric_limits<int>::min();
      current_statement__ = 132;
      length01 = std::numeric_limits<int>::min();
      current_statement__ = 133;
      length10 = std::numeric_limits<int>::min();
      current_statement__ = 134;
      length11 = std::numeric_limits<int>::min();
      current_statement__ = 135;
      stan::model::assign(S, 1, "assigning variable S",
        stan::model::index_uni(1));
      current_statement__ = 136;
      stan::model::assign(S, 1, "assigning variable S",
        stan::model::index_uni(2));
      current_statement__ = 137;
      stan::model::assign(S, 2, "assigning variable S",
        stan::model::index_uni(3));
      current_statement__ = 198;
      if ((stan::math::primitive_value(stan::math::logical_eq(ER, 1)) &&
          stan::math::primitive_value(stan::math::logical_eq(K_smodel, 1)))) {
        current_statement__ = 185;
        length00 = 2;
        current_statement__ = 186;
        stan::model::assign(M00, 1, "assigning variable M00",
          stan::model::index_uni(1));
        current_statement__ = 187;
        stan::model::assign(M00, 3, "assigning variable M00",
          stan::model::index_uni(2));
        current_statement__ = 188;
        length01 = 0;
        current_statement__ = 189;
        stan::model::assign(M01, 0, "assigning variable M01",
          stan::model::index_uni(1));
        current_statement__ = 190;
        stan::model::assign(M01, 0, "assigning variable M01",
          stan::model::index_uni(2));
        current_statement__ = 191;
        length10 = 1;
        current_statement__ = 192;
        stan::model::assign(M10, 3, "assigning variable M10",
          stan::model::index_uni(1));
        current_statement__ = 193;
        stan::model::assign(M10, 0, "assigning variable M10",
          stan::model::index_uni(2));
        current_statement__ = 194;
        length11 = 1;
        current_statement__ = 195;
        stan::model::assign(M11, 2, "assigning variable M11",
          stan::model::index_uni(1));
        current_statement__ = 196;
        stan::model::assign(M11, 0, "assigning variable M11",
          stan::model::index_uni(2));
      } else {
        current_statement__ = 184;
        if ((stan::math::primitive_value(stan::math::logical_eq(ER, 1)) &&
            stan::math::primitive_value(stan::math::logical_eq(K_smodel, 2)))) {
          current_statement__ = 170;
          stan::model::assign(S, 3, "assigning variable S",
            stan::model::index_uni(4));
          current_statement__ = 171;
          length00 = 2;
          current_statement__ = 172;
          stan::model::assign(M00, 1, "assigning variable M00",
            stan::model::index_uni(1));
          current_statement__ = 173;
          stan::model::assign(M00, 3, "assigning variable M00",
            stan::model::index_uni(2));
          current_statement__ = 174;
          length01 = 1;
          current_statement__ = 175;
          stan::model::assign(M01, 4, "assigning variable M01",
            stan::model::index_uni(1));
          current_statement__ = 176;
          stan::model::assign(M01, 0, "assigning variable M01",
            stan::model::index_uni(2));
          current_statement__ = 177;
          length10 = 1;
          current_statement__ = 178;
          stan::model::assign(M10, 3, "assigning variable M10",
            stan::model::index_uni(1));
          current_statement__ = 179;
          stan::model::assign(M10, 0, "assigning variable M10",
            stan::model::index_uni(2));
          current_statement__ = 180;
          length11 = 2;
          current_statement__ = 181;
          stan::model::assign(M11, 2, "assigning variable M11",
            stan::model::index_uni(1));
          current_statement__ = 182;
          stan::model::assign(M11, 4, "assigning variable M11",
            stan::model::index_uni(2));
        } else {
          current_statement__ = 169;
          if ((stan::math::primitive_value(stan::math::logical_eq(ER, 0)) &&
              stan::math::primitive_value(stan::math::logical_eq(K_smodel, 1)))) {
            current_statement__ = 155;
            stan::model::assign(S, 2, "assigning variable S",
              stan::model::index_uni(4));
            current_statement__ = 156;
            length00 = 2;
            current_statement__ = 157;
            stan::model::assign(M00, 1, "assigning variable M00",
              stan::model::index_uni(1));
            current_statement__ = 158;
            stan::model::assign(M00, 3, "assigning variable M00",
              stan::model::index_uni(2));
            current_statement__ = 159;
            length01 = 0;
            current_statement__ = 160;
            stan::model::assign(M01, 0, "assigning variable M01",
              stan::model::index_uni(1));
            current_statement__ = 161;
            stan::model::assign(M01, 0, "assigning variable M01",
              stan::model::index_uni(2));
            current_statement__ = 162;
            length10 = 1;
            current_statement__ = 163;
            stan::model::assign(M10, 4, "assigning variable M10",
              stan::model::index_uni(1));
            current_statement__ = 164;
            stan::model::assign(M10, 0, "assigning variable M10",
              stan::model::index_uni(2));
            current_statement__ = 165;
            length11 = 1;
            current_statement__ = 166;
            stan::model::assign(M11, 2, "assigning variable M11",
              stan::model::index_uni(1));
            current_statement__ = 167;
            stan::model::assign(M11, 0, "assigning variable M11",
              stan::model::index_uni(2));
          } else {
            current_statement__ = 154;
            if ((stan::math::primitive_value(stan::math::logical_eq(ER, 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(K_smodel, 2)))) {
              current_statement__ = 138;
              stan::model::assign(S, 2, "assigning variable S",
                stan::model::index_uni(4));
              current_statement__ = 139;
              stan::model::assign(S, 3, "assigning variable S",
                stan::model::index_uni(5));
              current_statement__ = 140;
              stan::model::assign(S, 3, "assigning variable S",
                stan::model::index_uni(6));
              current_statement__ = 141;
              length00 = 2;
              current_statement__ = 142;
              stan::model::assign(M00, 1, "assigning variable M00",
                stan::model::index_uni(1));
              current_statement__ = 143;
              stan::model::assign(M00, 3, "assigning variable M00",
                stan::model::index_uni(2));
              current_statement__ = 144;
              length01 = 1;
              current_statement__ = 145;
              stan::model::assign(M01, 5, "assigning variable M01",
                stan::model::index_uni(1));
              current_statement__ = 146;
              stan::model::assign(M01, 0, "assigning variable M01",
                stan::model::index_uni(2));
              current_statement__ = 147;
              length10 = 1;
              current_statement__ = 148;
              stan::model::assign(M10, 4, "assigning variable M10",
                stan::model::index_uni(1));
              current_statement__ = 149;
              stan::model::assign(M10, 0, "assigning variable M10",
                stan::model::index_uni(2));
              current_statement__ = 150;
              length11 = 2;
              current_statement__ = 151;
              stan::model::assign(M11, 2, "assigning variable M11",
                stan::model::index_uni(1));
              current_statement__ = 152;
              stan::model::assign(M11, 6, "assigning variable M11",
                stan::model::index_uni(2));
            }
          }
        }
      }
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "M00", M00, 0);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "M00", M00, K_ymodel);
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "M01", M01, 0);
      current_statement__ = 128;
      stan::math::check_less_or_equal(function__, "M01", M01, K_ymodel);
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "M10", M10, 0);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "M10", M10, K_ymodel);
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "M11", M11, 0);
      current_statement__ = 130;
      stan::math::check_less_or_equal(function__, "M11", M11, K_ymodel);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("beta_ymodel", "K_ymodel",
        K_ymodel);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("beta_ymodel", "P_ymodel",
        P_ymodel);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("beta_smodel", "K_smodel",
        K_smodel);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("beta_smodel", "P_smodel",
        P_smodel);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("sigma", "K_ymodel", K_ymodel);
      current_statement__ = 204;
      strata_prob_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 204;
      strata_prob_1dim__ = (K_smodel + 1);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("strata_prob", "K_smodel + 1",
        strata_prob_1dim__);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("mean_outcome", "K_ymodel",
        K_ymodel);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K_ymodel * P_ymodel) + (K_smodel * P_smodel) +
      K_ymodel;
  }
  inline std::string model_name() const final {
    return "model_Gaussian";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_Gaussian_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_ymodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_ymodel, P_ymodel,
          DUMMY_VAR__);
      current_statement__ = 1;
      beta_ymodel = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(K_ymodel,
                      P_ymodel);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_smodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_smodel, P_smodel,
          DUMMY_VAR__);
      current_statement__ = 2;
      beta_smodel = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(K_smodel,
                      P_smodel);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(K_ymodel, DUMMY_VAR__);
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, K_ymodel);
      {
        current_statement__ = 34;
        for (int k = 1; k <= K_smodel; ++k) {
          current_statement__ = 32;
          for (int p = 1; p <= P_smodel; ++p) {
            current_statement__ = 30;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(beta_smodel, "beta_smodel",
                               stan::model::index_uni(k),
                               stan::model::index_uni(p)),
                             stan::model::rvalue(beta_mean_smodel,
                               "beta_mean_smodel", stan::model::index_uni(k),
                               stan::model::index_uni(p)),
                             stan::model::rvalue(beta_sd_smodel,
                               "beta_sd_smodel", stan::model::index_uni(k),
                               stan::model::index_uni(p))));
          }
        }
        current_statement__ = 39;
        for (int k = 1; k <= K_ymodel; ++k) {
          current_statement__ = 37;
          for (int p = 1; p <= P_ymodel; ++p) {
            current_statement__ = 35;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(beta_ymodel, "beta_ymodel",
                               stan::model::index_uni(k),
                               stan::model::index_uni(p)),
                             stan::model::rvalue(beta_mean_ymodel,
                               "beta_mean_ymodel", stan::model::index_uni(k),
                               stan::model::index_uni(p)),
                             stan::model::rvalue(beta_sd_ymodel,
                               "beta_sd_ymodel", stan::model::index_uni(k),
                               stan::model::index_uni(p))));
          }
        }
        current_statement__ = 42;
        for (int k = 1; k <= K_ymodel; ++k) {
          current_statement__ = 40;
          lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(k)),
                           stan::model::rvalue(sigma_shape_ymodel,
                             "sigma_shape_ymodel", stan::model::index_uni(k)),
                           stan::model::rvalue(sigma_scale_ymodel,
                             "sigma_scale_ymodel", stan::model::index_uni(k))));
        }
        current_statement__ = 89;
        if (stan::math::logical_eq(run_estimation, 1)) {
          current_statement__ = 87;
          for (int n = 1; n <= N; ++n) {
            int length = std::numeric_limits<int>::min();
            current_statement__ = 44;
            stan::math::validate_non_negative_index("log_prob",
              "K_smodel + 1", (K_smodel + 1));
            std::vector<local_scalar_t__> log_prob =
              std::vector<local_scalar_t__>((K_smodel + 1), DUMMY_VAR__);
            current_statement__ = 46;
            stan::model::assign(log_prob, 0, "assigning variable log_prob",
              stan::model::index_uni(1));
            current_statement__ = 49;
            for (int k = 2; k <= (K_smodel + 1); ++k) {
              current_statement__ = 47;
              stan::model::assign(log_prob,
                stan::math::multiply(
                  stan::model::rvalue(X_smodel, "X_smodel",
                    stan::model::index_uni(n)),
                  stan::math::transpose(
                    stan::model::rvalue(beta_smodel, "beta_smodel",
                      stan::model::index_uni((k - 1))))),
                "assigning variable log_prob", stan::model::index_uni(k));
            }
            current_statement__ = 61;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(
                     stan::model::rvalue(Z, "Z", stan::model::index_uni(n)),
                     0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(
                    stan::model::rvalue(D, "D", stan::model::index_uni(n)), 0)))) {
              current_statement__ = 59;
              length = length00;
            } else {
              current_statement__ = 58;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(Z, "Z", stan::model::index_uni(n)),
                       1))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                      0)))) {
                current_statement__ = 56;
                length = length10;
              } else {
                current_statement__ = 55;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(Z, "Z",
                           stan::model::index_uni(n)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                        1)))) {
                  current_statement__ = 53;
                  length = length11;
                } else {
                  current_statement__ = 52;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(Z, "Z",
                             stan::model::index_uni(n)), 0))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(D, "D",
                            stan::model::index_uni(n)), 1)))) {
                    current_statement__ = 50;
                    length = length01;
                  }
                }
              }
            }
            {
              current_statement__ = 62;
              stan::math::validate_non_negative_index("log_l", "length",
                length);
              std::vector<local_scalar_t__> log_l =
                std::vector<local_scalar_t__>(length, DUMMY_VAR__);
              current_statement__ = 83;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(Z, "Z", stan::model::index_uni(n)),
                       0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                      0)))) {
                current_statement__ = 81;
                for (int l = 1; l <= length; ++l) {
                  current_statement__ = 79;
                  stan::model::assign(log_l,
                    (stan::model::rvalue(log_prob, "log_prob",
                       stan::model::index_uni(
                         stan::model::rvalue(S, "S",
                           stan::model::index_uni(
                             stan::model::rvalue(M00, "M00",
                               stan::model::index_uni(l)))))) +
                    stan::math::normal_lpdf<false>(
                      stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                      stan::math::multiply(
                        stan::model::rvalue(X_ymodel, "X_ymodel",
                          stan::model::index_uni(n)),
                        stan::math::transpose(
                          stan::model::rvalue(beta_ymodel, "beta_ymodel",
                            stan::model::index_uni(
                              stan::model::rvalue(M00, "M00",
                                stan::model::index_uni(l)))))),
                      stan::model::rvalue(sigma, "sigma",
                        stan::model::index_uni(
                          stan::model::rvalue(M00, "M00",
                            stan::model::index_uni(l)))))),
                    "assigning variable log_l", stan::model::index_uni(l));
                }
              } else {
                current_statement__ = 78;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(Z, "Z",
                           stan::model::index_uni(n)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                        0)))) {
                  current_statement__ = 76;
                  for (int l = 1; l <= length; ++l) {
                    current_statement__ = 74;
                    stan::model::assign(log_l,
                      (stan::model::rvalue(log_prob, "log_prob",
                         stan::model::index_uni(
                           stan::model::rvalue(S, "S",
                             stan::model::index_uni(
                               stan::model::rvalue(M10, "M10",
                                 stan::model::index_uni(l)))))) +
                      stan::math::normal_lpdf<false>(
                        stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                        stan::math::multiply(
                          stan::model::rvalue(X_ymodel, "X_ymodel",
                            stan::model::index_uni(n)),
                          stan::math::transpose(
                            stan::model::rvalue(beta_ymodel, "beta_ymodel",
                              stan::model::index_uni(
                                stan::model::rvalue(M10, "M10",
                                  stan::model::index_uni(l)))))),
                        stan::model::rvalue(sigma, "sigma",
                          stan::model::index_uni(
                            stan::model::rvalue(M10, "M10",
                              stan::model::index_uni(l)))))),
                      "assigning variable log_l", stan::model::index_uni(l));
                  }
                } else {
                  current_statement__ = 73;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(Z, "Z",
                             stan::model::index_uni(n)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(D, "D",
                            stan::model::index_uni(n)), 1)))) {
                    current_statement__ = 71;
                    for (int l = 1; l <= length; ++l) {
                      current_statement__ = 69;
                      stan::model::assign(log_l,
                        (stan::model::rvalue(log_prob, "log_prob",
                           stan::model::index_uni(
                             stan::model::rvalue(S, "S",
                               stan::model::index_uni(
                                 stan::model::rvalue(M11, "M11",
                                   stan::model::index_uni(l)))))) +
                        stan::math::normal_lpdf<false>(
                          stan::model::rvalue(Y, "Y",
                            stan::model::index_uni(n)),
                          stan::math::multiply(
                            stan::model::rvalue(X_ymodel, "X_ymodel",
                              stan::model::index_uni(n)),
                            stan::math::transpose(
                              stan::model::rvalue(beta_ymodel, "beta_ymodel",
                                stan::model::index_uni(
                                  stan::model::rvalue(M11, "M11",
                                    stan::model::index_uni(l)))))),
                          stan::model::rvalue(sigma, "sigma",
                            stan::model::index_uni(
                              stan::model::rvalue(M11, "M11",
                                stan::model::index_uni(l)))))),
                        "assigning variable log_l", stan::model::index_uni(l));
                    }
                  } else {
                    current_statement__ = 68;
                    if ((stan::math::primitive_value(
                           stan::math::logical_eq(
                             stan::model::rvalue(Z, "Z",
                               stan::model::index_uni(n)), 0))
                        &&
                        stan::math::primitive_value(
                          stan::math::logical_eq(
                            stan::model::rvalue(D, "D",
                              stan::model::index_uni(n)), 1)))) {
                      current_statement__ = 66;
                      for (int l = 1; l <= length; ++l) {
                        current_statement__ = 64;
                        stan::model::assign(log_l,
                          (stan::model::rvalue(log_prob, "log_prob",
                             stan::model::index_uni(
                               stan::model::rvalue(S, "S",
                                 stan::model::index_uni(
                                   stan::model::rvalue(M01, "M01",
                                     stan::model::index_uni(l)))))) +
                          stan::math::normal_lpdf<false>(
                            stan::model::rvalue(Y, "Y",
                              stan::model::index_uni(n)),
                            stan::math::multiply(
                              stan::model::rvalue(X_ymodel, "X_ymodel",
                                stan::model::index_uni(n)),
                              stan::math::transpose(
                                stan::model::rvalue(beta_ymodel,
                                  "beta_ymodel",
                                  stan::model::index_uni(
                                    stan::model::rvalue(M01, "M01",
                                      stan::model::index_uni(l)))))),
                            stan::model::rvalue(sigma, "sigma",
                              stan::model::index_uni(
                                stan::model::rvalue(M01, "M01",
                                  stan::model::index_uni(l)))))),
                          "assigning variable log_l",
                          stan::model::index_uni(l));
                      }
                    }
                  }
                }
              }
              current_statement__ = 84;
              lp_accum__.add((stan::math::log_sum_exp(log_l) -
                stan::math::log_sum_exp(log_prob)));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_Gaussian_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> beta_ymodel =
        Eigen::Matrix<double,-1,-1>::Constant(K_ymodel, P_ymodel,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_ymodel = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(K_ymodel,
                      P_ymodel);
      Eigen::Matrix<double,-1,-1> beta_smodel =
        Eigen::Matrix<double,-1,-1>::Constant(K_smodel, P_smodel,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_smodel = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(K_smodel,
                      P_smodel);
      std::vector<double> sigma =
        std::vector<double>(K_ymodel,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, K_ymodel);
      out__.write(beta_ymodel);
      out__.write(beta_smodel);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> strata_prob =
        Eigen::Matrix<double,-1,1>::Constant(strata_prob_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mean_outcome =
        Eigen::Matrix<double,-1,1>::Constant(K_ymodel,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 6;
        stan::math::validate_non_negative_index("log_prob", "N", N);
        current_statement__ = 7;
        stan::math::validate_non_negative_index("log_prob", "K_smodel + 1",
          (K_smodel + 1));
        Eigen::Matrix<double,-1,-1> log_prob =
          Eigen::Matrix<double,-1,-1>::Constant(N, (K_smodel + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 9;
        stan::math::validate_non_negative_index("expected_mean", "N", N);
        current_statement__ = 10;
        stan::math::validate_non_negative_index("expected_mean", "K_ymodel",
          K_ymodel);
        Eigen::Matrix<double,-1,-1> expected_mean =
          Eigen::Matrix<double,-1,-1>::Constant(N, K_ymodel,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 12;
        stan::math::validate_non_negative_index("weighted_outcome_sum",
          "K_ymodel", K_ymodel);
        Eigen::Matrix<double,-1,1> weighted_outcome_sum =
          Eigen::Matrix<double,-1,1>::Constant(K_ymodel,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 14;
        stan::model::assign(log_prob, stan::math::rep_vector(0, N),
          "assigning variable log_prob", stan::model::index_omni(),
          stan::model::index_uni(1));
        current_statement__ = 15;
        stan::model::assign(log_prob,
          stan::math::multiply(X_smodel, stan::math::transpose(beta_smodel)),
          "assigning variable log_prob", stan::model::index_omni(),
          stan::model::index_min_max(2, (K_smodel + 1)));
        current_statement__ = 18;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 16;
          stan::model::assign(log_prob,
            stan::math::subtract(
              stan::model::deep_copy(
                stan::model::rvalue(log_prob, "log_prob",
                  stan::model::index_uni(n))),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_prob, "log_prob",
                  stan::model::index_uni(n)))),
            "assigning variable log_prob", stan::model::index_uni(n));
        }
        current_statement__ = 21;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 20;
          for (int k = 1; k <= K_ymodel; ++k) {
            current_statement__ = 19;
            stan::model::assign(expected_mean,
              stan::math::multiply(
                stan::model::rvalue(X_ymodel, "X_ymodel",
                  stan::model::index_uni(n)),
                stan::math::transpose(
                  stan::model::rvalue(beta_ymodel, "beta_ymodel",
                    stan::model::index_uni(k)))),
              "assigning variable expected_mean", stan::model::index_uni(n),
              stan::model::index_uni(k));
          }
        }
        current_statement__ = 24;
        for (int k = 1; k <= (K_smodel + 1); ++k) {
          current_statement__ = 22;
          stan::model::assign(strata_prob,
            stan::math::mean(
              stan::math::exp(
                stan::model::rvalue(log_prob, "log_prob",
                  stan::model::index_omni(), stan::model::index_uni(k)))),
            "assigning variable strata_prob", stan::model::index_uni(k));
        }
        current_statement__ = 28;
        for (int k = 1; k <= K_ymodel; ++k) {
          current_statement__ = 25;
          stan::model::assign(weighted_outcome_sum,
            stan::math::mean(
              stan::math::elt_multiply(
                stan::model::rvalue(expected_mean, "expected_mean",
                  stan::model::index_omni(), stan::model::index_uni(k)),
                stan::math::exp(
                  stan::model::rvalue(log_prob, "log_prob",
                    stan::model::index_omni(),
                    stan::model::index_uni(
                      stan::model::rvalue(S, "S", stan::model::index_uni(k))))))),
            "assigning variable weighted_outcome_sum",
            stan::model::index_uni(k));
          current_statement__ = 26;
          stan::model::assign(mean_outcome,
            (stan::model::rvalue(weighted_outcome_sum,
               "weighted_outcome_sum", stan::model::index_uni(k)) /
            stan::model::rvalue(strata_prob, "strata_prob",
              stan::model::index_uni(
                stan::model::rvalue(S, "S", stan::model::index_uni(k))))),
            "assigning variable mean_outcome", stan::model::index_uni(k));
        }
      }
      out__.write(strata_prob);
      out__.write(mean_outcome);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_ymodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_ymodel, P_ymodel,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_ymodel,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K_ymodel, P_ymodel),
        "assigning variable beta_ymodel");
      out__.write(beta_ymodel);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_smodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_smodel, P_smodel,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_smodel,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K_smodel, P_smodel),
        "assigning variable beta_smodel");
      out__.write(beta_smodel);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(K_ymodel, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(K_ymodel),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_ymodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_ymodel),
          static_cast<size_t>(P_ymodel)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_smodel",
        "double",
        std::vector<size_t>{static_cast<size_t>(K_smodel),
          static_cast<size_t>(P_smodel)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(K_ymodel)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_ymodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_ymodel, P_ymodel,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_ymodel_flat__;
        current_statement__ = 1;
        beta_ymodel_flat__ = context__.vals_r("beta_ymodel");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= K_ymodel; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(beta_ymodel, beta_ymodel_flat__[(pos__ - 1)],
              "assigning variable beta_ymodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_ymodel);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_smodel =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K_smodel, P_smodel,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_smodel_flat__;
        current_statement__ = 2;
        beta_smodel_flat__ = context__.vals_r("beta_smodel");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= K_smodel; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(beta_smodel, beta_smodel_flat__[(pos__ - 1)],
              "assigning variable beta_smodel",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_smodel);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(K_ymodel, DUMMY_VAR__);
      current_statement__ = 3;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_ymodel", "beta_smodel", "sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"strata_prob", "mean_outcome"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    K_ymodel),
                                                 static_cast<size_t>(P_ymodel)},
                std::vector<size_t>{static_cast<size_t>(K_smodel),
                  static_cast<size_t>(P_smodel)},
                std::vector<size_t>{static_cast<size_t>(K_ymodel)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(strata_prob_1dim__)},
             std::vector<size_t>{static_cast<size_t>(K_ymodel)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K_ymodel; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_ymodel" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K_smodel; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_smodel" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K_ymodel; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= strata_prob_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "strata_prob" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K_ymodel; ++sym1__) {
        param_names__.emplace_back(std::string() + "mean_outcome" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P_ymodel; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K_ymodel; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_ymodel" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P_smodel; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K_smodel; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_smodel" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K_ymodel; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= strata_prob_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "strata_prob" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K_ymodel; ++sym1__) {
        param_names__.emplace_back(std::string() + "mean_outcome" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_ymodel\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K_ymodel) + ",\"cols\":" + std::to_string(P_ymodel) + "},\"block\":\"parameters\"},{\"name\":\"beta_smodel\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K_smodel) + ",\"cols\":" + std::to_string(P_smodel) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K_ymodel) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"strata_prob\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(strata_prob_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"mean_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_ymodel) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_ymodel\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K_ymodel) + ",\"cols\":" + std::to_string(P_ymodel) + "},\"block\":\"parameters\"},{\"name\":\"beta_smodel\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K_smodel) + ",\"cols\":" + std::to_string(P_smodel) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K_ymodel) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"strata_prob\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(strata_prob_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"mean_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_ymodel) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K_ymodel * P_ymodel) + (K_smodel *
      P_smodel)) + K_ymodel);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((strata_prob_1dim__ + K_ymodel));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K_ymodel * P_ymodel) + (K_smodel *
      P_smodel)) + K_ymodel);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((strata_prob_1dim__ + K_ymodel));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_Gaussian_namespace::model_Gaussian;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_Gaussian_namespace::profiles__;
}
#endif
#endif
